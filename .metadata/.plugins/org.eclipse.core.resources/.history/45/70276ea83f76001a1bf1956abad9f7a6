/* 
 	Using Unique Identifier:
 		HQL provides a special property called id which can be used to reference the unique identifier of an object such as.
 		
 		SELECT m.messageId, m.senderName, m.sendDate FROM MessageSQL m WHERE m.id = 3
 		
 		This will be equivalent to the following HQL query:
 		SELECT m.messageId, m.senderName, m.sendDate FROM MessageSQL m WHERE m.messageId = 3
 */

package com.aga;

import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.AnnotationConfiguration;

public class MessageHQLWhereTest {
	
	public static void main(String[] args) {
		SessionFactory sf = null;
		Session session = null;
		Transaction tx = null;
		String query = null;
		
		try {
				// config the db details
				sf = new AnnotationConfiguration().configure("hibernate.cfg.xml").buildSessionFactory();
				//get the session using session factory object
				session = sf.openSession();
				tx = session.beginTransaction();
				
				session = sf.openSession();
				query = "SELECT m.messageId, m.senderName, m.sendDate FROM MessageSQL m WHERE c.messageId > 2";
				Query q = session.createQuery(query);
				
				// get List from Query
				List<Object[]> list = q.list();
				
				System.out.println("-----------------------------Use of Where Clause---------------------------------------");
				System.out.println("MessageID	SenderName		SendDate");
				for(Object[] obj : list) {
					System.out.print(obj[0]+"		");
					System.out.print(obj[1]+"		");
					System.out.print(obj[2]+"		");
					
					System.out.println();
				}
				
				System.out.println("-----------------------------Use of like operator---------------------------------------");
				
				Query count_query= session.createQuery("SELECT m.messageId, m.senderName, m.sendDate FROM MessageSQL m"
						+ "WHERE c.senderName like '%Kot%'");
				List<Object[]> ll = count_query.list();
				System.out.println("MessageID	SenderName		SendDate");
				for(Object[] obj : ll) {
					System.out.print(obj[0]+"		");
					System.out.print(obj[1]+"		");
					System.out.print(obj[2]+"		");
					
					System.out.println();
				}
				
				/*
				 	We can use the DISTINCT keyword followed by the expression as an argument to an aggregate function specifying
				 	that duplicate values are to be eliminate before the aggregate function is applied.
				 	NOTE: Null values are eliminated before the aggregate function is applied.
				 */
				Query count_query_distinct= session.createQuery("SELECT COUNT(DISTINCT  m.senderName) FROM MessageSQL m");
				System.out.println("Total No of Messages: "+count_query_distinct.list().get(0));
				
				Query min_query= session.createQuery("SELECT MIN(m.messageId) FROM MessageSQL m");
				System.out.println("Total No of Messages: "+min_query.list().get(0));
				
				Query max_query= session.createQuery("SELECT MAX(m.messageId) FROM MessageSQL m");
				System.out.println("Total No of Messages: "+max_query.list().get(0));
				
				session.close();
				sf.close();
		} catch (Exception e) {
			tx.rollback();
			e.printStackTrace();
		}
		

	}

}
